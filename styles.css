*, ::before, ::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html {
    font-size: 62.5%;
}
body{
    font-family: Baskervville, serif;
    color: linen;
    background-color: rgb(20, 30, 40);
}
h1 {
    font-family: Anton, sans-serif;
}

h2,h3,h4,h5,h6 {
    font-family: Raleway, sans-serif;
}

a {
    text-decoration: none;
    color: linen;
}

/* learning Grid*/

main {
    display: grid;
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
    row-gap: 3rem;

}

.heading {
    grid-column: 2/3;
    display: grid;
    grid-template-columns: repeat(2,1fr);
    row-gap: 1.5rem;
}
.text {
    grid-column: 2/3;
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    column-width: 25rem;
    text-align: justify;
}

/* .text element is not a CSS Grid,
but you can create columns within an element without using Grid by using 
the column-width property.*/

.hero {
    grid-column: 1/-1;
    /* There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use -1 for the end column.*/
    position: relative;
}
img {
    width: 100%;
    object-fit: cover;
}
.hero-title {
    text-align: center;
    color: orangered;
    font-size: 8rem;
}
.hero-subtitle {
    font-size: 2.4rem;
    color: orangered;
    text-align: center;
}
.author {
    font-size: 2rem;
    font-family: Raleway, sans-serif;
}

.author-name a:hover {
    background-color: #306203;
}
.publish-date {
    color: rgba(255, 255, 255, 0.5) ;
}
.social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    align-items: center;
}

/*If you wanted to add more social icons,
but keep them on the same row, 
you would need to update grid-template-columns to create additional columns. 
As an alternative, you can use the grid-auto-flow property.
This property takes either row or column as the first value,
with an optional second value of dense. grid-auto-flow uses
an auto-placement algorithm to adjust the grid layout.
Setting it to column will tell the algorithm to create new columns for content as needed.
The dense value allows the algorithm to backtrack and fill holes in the grid
with smaller items, which can result in items appearing out of order

Now the auto-placement algorithm will kick in when you add a new icon element. 
However, the algorithm defaults the new column width to be auto, which will not match 
your current columns.
You can override this with the grid-auto-columns property.
 Give the .social-icons selector a grid-auto-columns property set to 1fr.*/


.first-paragraph::first-letter {
    font-size: 6rem;
    color: orangered;
    float: left;
    margin-right: 1rem;
}

hr {
    margin: 1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
}
.quote {
    color: #00beef;
    font-size: 2.4rem;
    text-align: center;
    font-family: Raleway, sans-serif;
}
.quote::before {
    content: '" ';
}
.quote::after{
    content: ' "';
}

/*A quote is not really a quote without proper quotation marks.
You can add these with CSS pseudo selectors.
Create a .quote::before selector and set the content property to " with a space following it.
Also, create a .quote::after selector and set the content property to " with a space preceding it*/

.text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;
}

.lists {
    list-style-type: none;
    margin-top: 2rem;
}

.lists li {
    margin-bottom: 1.5rem;
}

.list-title, .list-subtitle {
    color: #00beef;
}

.image-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(3, min-content);
    gap: 2rem;
    place-items: center;
}

/*The place-items property can be used to set the align-items and justify-items values
at the same time. The place-items property takes one or two values. 
If one value is provided, it is used for both the align-items and justify-items properties.
If two values are provided, the first value is used for the align-items property
and the second value is used for the justify-items property.*/

.image-1, .image-3 {
    grid-column: 1/-1;
}


/*Now that the magazine layout is finished, you need to make it responsive.*/

@media only screen and (max-width:720px) {
    .image-wrapper {
        grid-template-columns: 1fr;
    }
}

@media only screen and (max-width: 600px) {
    .text-with-images {
        grid-template-columns: 1fr;
    }
}

/*This will collapse your bottom text area into a single column on smaller screens.*/

@media only screen and (max-width:550px) {
    .hero-title {
        font-size: 6rem;
    }
    .hero-subtitle, .author, .quote, .list-title {
        font-size:  1.8rem;
    }
    .social-icons {
        font-size: 2rem;
    }
    .text {
        font-size: 1.6rem;
    }
}
    
@media only screen and (max-width:420px) {
    .hero-title {
        font-size: 4.5rem;
    }
}
    

